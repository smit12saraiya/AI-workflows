{
  "name": "ImageOCR",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": false
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1040,
        -240
      ],
      "id": "a8f07aad-68e2-4f5a-b861-72ef6f7564f0",
      "name": "Telegram Trigger",
      "webhookId": "e778e51c-2157-40d6-aa9c-37f8124af8ff",
      "credentials": {
        "telegramApi": {
          "id": "<TELEGRAM_API_CREDENTIAL_ID>",
          "name": "<YOUR_TELEGRAM_CREDENTIAL_NAME>"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Get the largest photo from the array\nconst photos = $input.first().json.message.photo\nlet largest = $input.first().json.message.photo[0]\n\nfor (const photo of photos) {\n  if (photo.file_size > largest.file_size) {\n    largest = photo;\n  }\n}\n\n// 2. Output the file_id of the largest photo\nreturn {\n  json: {\n    file_id: largest.file_id,\n    file_size: largest.file_size\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        -240
      ],
      "id": "5da495f6-8fe1-4ddd-88a5-a92473972c98",
      "name": "LargestPhoto"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -592,
        -240
      ],
      "id": "5cc8310c-d93e-4c8b-9e78-410ec1bd9940",
      "name": "Download Binary",
      "webhookId": "<YOUR_TELEGRAM_WEBHOOK_ID>",
      "credentials": {
        "telegramApi": {
          "id": "<TELEGRAM_API_CREDENTIAL_ID>",
          "name": "<YOUR_TELEGRAM_CREDENTIAL_NAME>"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "data.data",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -368,
        -240
      ],
      "id": "40b0d090-5e9d-4505-8f59-aa39e8d281e1",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://vision.googleapis.com/v1/images:annotate?key={{$env.GOOGLE_VISION_API_KEY}}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"requests\": [\n    {\n      \"image\": {\n        \"content\": \"{{$json.data.data}}\"\n        \n      },\n      \"features\": [\n        {\n          \"type\": \"TEXT_DETECTION\"\n          \n        }\n        \n      ]\n      \n    }\n    \n  ]\n  \n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        -240
      ],
      "id": "3b078edf-d5ce-48d5-b80b-733a733eb267",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Extract the detected text from Google Vision response\nconst response = $input.first().json;\nconst detectedText = response.responses[0].fullTextAnnotation?.text || 'No text detected';\n\nreturn {\n  json: {\n    extractedText: detectedText,\n    // You can also extract individual text annotations if needed\n    textAnnotations: response.responses[0].textAnnotations || []\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -240
      ],
      "id": "c7b65c56-7d8d-42c6-a880-a66729c9a6b9",
      "name": "Text Extraction"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract key information from this receipt text and return ONLY valid JSON:\n\n{{ $json.textAnnotations[0].description }}\n\nParse all visible items, prices, restaurant details, and totals.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=#Overview\n\nYou are expert AI agent in text cleaning the raw data which is extracted from the OCR using vision APIs as user prompt message called the extracted Text.\n\n#Roles\nYour role is to provide me with clean structured output which i can add to my database for further use or it can be used for ticketing, mailing and other purpose.\n\nAlways ensure that meta data have some meaningful insights about the image, not some garbage data. If nothing you can think of then just add the mandatory fields to the meta data."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        304,
        -240
      ],
      "id": "75b630c3-244c-4cb3-af3c-749051308e2e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        312,
        -16
      ],
      "id": "288c2331-8643-4ccb-8e88-2101e5bc04c5",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "<OPENROUTER_API_CREDENTIAL_ID>",
          "name": "<YOUR_OPENROUTER_CREDENTIAL_NAME>"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"restaurant_name\": {\"type\": \"string\"},\n    \"address\": {\"type\": \"string\"},\n    \"phone\": {\"type\": \"string\"},\n    \"date_time\": {\"type\": \"string\"},\n    \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\"type\": \"string\"},\n          \"price\": {\"type\": \"string\"}\n        }\n      }\n    },\n    \"subtotal\": {\"type\": \"string\"},\n    \"tax\": {\"type\": \"string\"},\n    \"total\": {\"type\": \"string\"},\n    \"metadata\":{\"type\": \"string\"}\n  },\n  \"required\": [\"restaurant_name\", \"total\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        440,
        -16
      ],
      "id": "68478cb3-b65d-4661-bf0e-451dc4366434",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "content": "# Information Extraction from Images",
        "height": 80,
        "width": 656
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -640,
        -368
      ],
      "typeVersion": 1,
      "id": "fd6a6af8-007d-4567-843f-094afbee3ef5",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "10e-Zl3MSMYAMkJknmYkmKgbX4bF1XnYrlqUlnwi1zLM",
          "mode": "list",
          "cachedResultName": "ReceiptStorage",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/10e-Zl3MSMYAMkJknmYkmKgbX4bF1XnYrlqUlnwi1zLM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/10e-Zl3MSMYAMkJknmYkmKgbX4bF1XnYrlqUlnwi1zLM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "restaurant_name": "={{ $json.output.restaurant_name }}",
            "address": "={{ $json.output.address }}",
            "phone": "={{ $json.output.phone }}",
            "date_time": "={{ $json.output.date_time }}",
            "items": "={{ $json.output.items.map(item => `${item.name}: ${item.price}`).join('\\n') }}",
            "subtotal": "={{ $json.output.subtotal }}",
            "tax": "={{ $json.output.tax }}",
            "total": "={{ $json.output.total }}",
            "metadata": "={{ $json.output.metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "restaurant_name",
              "displayName": "restaurant_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "address",
              "displayName": "address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date_time",
              "displayName": "date_time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "items",
              "displayName": "items",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "subtotal",
              "displayName": "subtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tax",
              "displayName": "tax",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total",
              "displayName": "total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        656,
        -240
      ],
      "id": "4a1fbf5e-0efe-45b5-8b92-037fa7c86577",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "<GOOGLE_SHEETS_OAUTH2_CREDENTIAL_ID>",
          "name": "<YOUR_GOOGLE_SHEETS_CREDENTIAL_NAME>"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "LargestPhoto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LargestPhoto": {
      "main": [
        [
          {
            "node": "Download Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Binary": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Text Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Extraction": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "57d92e60-0442-429c-b980-065b05a7b2b6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5ae1ab82901b483d677523982b45f97904d59b0024907347c0691e19a4b9a3e7"
  },
  "id": "NTQNEKiQoZpsa5IE",
  "tags": [
    {
      "createdAt": "2025-09-17T02:33:16.832Z",
      "updatedAt": "2025-09-17T02:33:16.832Z",
      "id": "544mB0W0q53k7ocr",
      "name": "Telegram"
    }
  ]
}